{"version":3,"sources":["components/DNAInput/DNAInput.styles.ts","modules/DNA.ts","hooks/useDNA.ts","hooks/useInput.ts","components/DNAInput/index.tsx","App.tsx","reportWebVitals.ts","modules/index.ts","index.tsx"],"names":["Container","styled","div","DNAInput","input","CHANGE_DNA_INPUT","REVERT_DNA","COMPLEMENTARY_COMBINATION","changeDNAInput","createAction","revertDNA","complementaryCombinate","DNA","createReducer","DNASequence","revertedSeq","complementarySeq","state","action","payload","revertString","createComplementaryString","str","revertedStringArr","c","unshift","join","complementaryStringArr","push","useDNA","useSelector","revertedDNA","dispatch","useDispatch","setDNASequence","useCallback","DNAStr","onRevert","createCompSeq","defaultArgs","initialValue","useInput","validator","undefined","callback","useState","value","setValue","onChange","event","target","endsWith","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8587ab2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: center;\n`;\n\nexport const DNAInput = styled.input`\n    width: 50vw;\n    text-align: center;\n`;","import { createReducer, ActionType, createAction } from 'typesafe-actions';\n\n/* Action Types */\nconst CHANGE_DNA_INPUT = 'CHANGE_DNA_INPUT';\nconst REVERT_DNA = 'REVERT_DNA'\nconst COMPLEMENTARY_COMBINATION = 'COMPLEMENTARY_COMBINATION'\n        \n/* actions */\nexport const changeDNAInput = createAction(CHANGE_DNA_INPUT)<string>();\nexport const revertDNA = createAction(REVERT_DNA)();\nexport const complementaryCombinate = createAction(COMPLEMENTARY_COMBINATION)();\n\nconst actions = {changeDNAInput, revertDNA, complementaryCombinate}\nexport type DNAAction = ActionType<typeof actions>;\n\n/* DNA state */\ntype DNAState = { \n    DNASequence: string; \n    revertedSeq: string;\n    complementarySeq: string;\n}\nconst initialState: DNAState = { \n    DNASequence: '', \n    revertedSeq: '',\n    complementarySeq: ''\n}\n\n/* reducer */\nconst DNA = createReducer<DNAState, DNAAction>(initialState, {\n    [CHANGE_DNA_INPUT]: (state, action) => ({...state, DNASequence: action.payload}),\n    [REVERT_DNA]: (state) => ( {...state, revertedSeq: revertString(state.DNASequence)} ),\n    [COMPLEMENTARY_COMBINATION]: (state) => ( \n        {...state, complementarySeq: createComplementaryString(state.revertedSeq)} \n    )\n})\n\nconst revertString = (str: string) => {\n    const revertedStringArr = []\n    for (const c of str) { revertedStringArr.unshift(c) }\n    const reveredStr = revertedStringArr.join('')\n\n    return reveredStr;\n}\n\nconst createComplementaryString = (str: string) => {\n    const complementaryStringArr = [];\n    for (const c of str) {\n        switch (c) {\n            case 'a': case 'A':\n                complementaryStringArr.push('t');\n                break;\n\n            case 't': case 'T':\n                complementaryStringArr.push('a');\n                break;\n\n            case 'g': case 'G':\n                complementaryStringArr.push('c');\n                break;\n\n            case 'c': case 'C':\n                complementaryStringArr.push('g');\n                break;\n\n            default:\n                break;\n        }\n    }\n    const complementaryStr = complementaryStringArr.join('');\n\n    return complementaryStr;\n}\n\nexport default DNA;","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { RootState } from \"../modules\";\nimport { changeDNAInput, complementaryCombinate, revertDNA } from \"../modules/DNA\";\n\n\nconst useDNA = () => {\n    const DNASequence = useSelector( (state: RootState) => state.DNA.DNASequence )\n    const revertedDNA = useSelector( (state: RootState) => state.DNA.revertedSeq )\n    const complementarySeq = useSelector( (state: RootState) => state.DNA.complementarySeq )\n\n    const dispatch = useDispatch();\n    const setDNASequence = useCallback(\n        (DNAStr: string) => dispatch(changeDNAInput(DNAStr)), \n        [dispatch]\n    )\n    const onRevert = useCallback(() => dispatch(revertDNA()), [dispatch])\n    const createCompSeq = useCallback(() => dispatch(complementaryCombinate()), [dispatch])\n\n    return {\n        DNASequence, revertedDNA, complementarySeq,\n        setDNASequence, onRevert, createCompSeq\n    }\n}\n\nexport default useDNA;","import  { ChangeEvent, useState } from \"react\";\n\ntype UseInputArgs = {\n    initialValue?: string;                      // Input에 들어갈 초기 값\n    validator?: (value: string) => boolean;     // value를 업데이트 하기 전에 유효한 값인지 확인하는 함수\n    callback?: (value: string) => any;         // input 태그 입력 시 실행되는 콜백 함수 \n}\n\nconst defaultArgs: UseInputArgs = {\n    initialValue: '',\n}\n\nconst useInput = ({ \n    initialValue = '',\n    validator = undefined,\n    callback = undefined,\n}: UseInputArgs = defaultArgs\n) => {\n\n    const [ value, setValue ] = useState(initialValue);\n    \n    const onChange = (\n        event: ChangeEvent<HTMLInputElement>\n    ) => { \n        const { target: { value } } = event;\n        const isVaildValue = validator ? validator(value) : true;\n        if ( isVaildValue ) { \n            setValue(value) \n            if (callback) { callback(value) }\n        }\n    }\n\n    return { value, onChange };\n}\n\nexport default useInput;","import React from \"react\";\n\nimport * as S from \"./DNAInput.styles\";\nimport useDNA from \"../../hooks/useDNA\";\nimport useInput from \"../../hooks/useInput\";\n\n\nfunction DNAInput () {\n\n    const { \n        revertedDNA, complementarySeq,\n        setDNASequence, onRevert, createCompSeq\n    } = useDNA();\n\n    const validator = (value: string) => {\n        return (\n            value.endsWith('a') ||\n            value.endsWith('A') ||\n            value.endsWith('t') ||\n            value.endsWith('T') ||\n            value.endsWith('g') ||\n            value.endsWith('G') ||\n            value.endsWith('c') ||\n            value.endsWith('C') \n        )\n    }\n\n    const { value, onChange } = useInput({\n        validator, callback: setDNASequence\n    });\n\n    return (\n        <S.Container>\n            <h2> Input DNA </h2>\n            <S.DNAInput type='text' value={value} onChange={onChange} />\n\n            <h2> Reverted DNA </h2>\n            <button onClick={onRevert} > Revert !! </button>\n            <h3> {revertedDNA} </h3>\n\n            <h2> Complement Combination Sequence </h2>\n            <button onClick={createCompSeq} > Just Do it !! </button>\n            <h3> {complementarySeq} </h3>\n        </S.Container>\n    )\n}\n\nexport default DNAInput","import React from 'react';\n\nimport { DNAInput } from \"./components\";\n\n\nfunction App() {\n  return (\n    <>\n      <DNAInput />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\n\nimport DNA from \"./DNA\";\n\n\nconst rootReducer = combineReducers({\n    DNA\n})\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}